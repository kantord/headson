name: Release-plz

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release-plz-release:
    name: Release-plz release
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'kantord' }}
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
    permissions:
      contents: write
      id-token: write
    steps:
      - &checkout
        name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - &install-rust
        name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - id: release
        name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release-plz-pr:
    name: Release-plz PR
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'kantord' }}
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - *checkout
      - *install-rust
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  python-wheels:
    name: Build and publish Python wheels
    needs: [release-plz-release]
    # Run after a new release, or allow manual dispatch to rebuild wheels (e.g., after CI fixes)
    if: ${{ github.event_name == 'workflow_dispatch' || needs.release-plz-release.outputs.releases_created == 'true' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Sync Python versions from Cargo.toml
        shell: bash
        run: |
          set -euo pipefail
          ROOT_VER=$(awk -F '"' '/^version[[:space:]]*=/ {print $2; exit}' Cargo.toml || true)
          if [ -z "${ROOT_VER}" ]; then
            echo "Failed to extract version from Cargo.toml" >&2
            exit 1
          fi
          echo "Using version: ${ROOT_VER}"
          update_version() {
            local file="$1"
            local tmp="${file}.tmp"
            awk -v ver="${ROOT_VER}" '
              BEGIN{ done=0 }
              done==0 && $0 ~ /^[[:space:]]*version[[:space:]]*=/ {
                sub(/"[^"]*"/, "\"" ver "\"");
                done=1
              }
              { print }
            ' "$file" > "$tmp"
            mv "$tmp" "$file"
          }
          update_version python/Cargo.toml
          update_version pyproject.toml
          echo "Synced versions in python/Cargo.toml and pyproject.toml"
          # Assert drift is gone
          PY_VER=$(awk -F '"' '/^version[[:space:]]*=/ {print $2; exit}' pyproject.toml)
          PY_CRATE_VER=$(awk -F '"' '/^version[[:space:]]*=/ {print $2; exit}' python/Cargo.toml)
          if [ "${ROOT_VER}" != "${PY_VER}" ] || [ "${ROOT_VER}" != "${PY_CRATE_VER}" ]; then
            echo "Version mismatch after sync: root=${ROOT_VER} pyproject=${PY_VER} python/Cargo.toml=${PY_CRATE_VER}" >&2
            exit 1
          fi
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Update Python lockfile
        shell: bash
        run: |
          set -euo pipefail
          # Ensure python/Cargo.lock reflects the new crate version and dependencies
          cargo update --manifest-path python/Cargo.toml

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --locked -i 3.10 3.11 3.12

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          # no --locked for sdist (not supported by maturin)

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: publish
          args: --skip-existing
