name: CI

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo-audit
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --deny warnings

  build-test:
    name: Build and test (deny warnings)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Build all targets
        env:
          RUSTFLAGS: >-
            -D warnings
            -D dead_code
            -D unused_imports
            -D unused_mut
            -D unused_variables
            -D unused_assignments
            -D unused_parens
            -D unreachable_pub
            -D unused_must_use
            -D unused_features
        run: cargo build --all-targets --all-features

      - name: Build (no default features)
        env:
          RUSTFLAGS: >-
            -D warnings
            -D dead_code
            -D unused_imports
            -D unused_mut
            -D unused_variables
            -D unused_assignments
            -D unused_parens
            -D unreachable_pub
            -D unused_must_use
            -D unused_features
        run: cargo build --all-targets --no-default-features

      - name: Run tests
        run: cargo test --all-targets --all-features

  clippy:
    name: Pre-commit (Clippy + fmt)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit on all files
        env:
          RUSTFLAGS: >-
            -D warnings
            -D dead_code
            -D unused_imports
            -D unused_mut
            -D unused_variables
            -D unreachable_pub
            -D unused_must_use
            -D unused_features
        run: pre-commit run --all-files

  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Verify rustfmt (79 cols)
        run: cargo fmt --all -- --check

  # Release handled by release-plz workflow

  python-tests:
    name: Python bindings (pytest)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Sync Python deps (dev)
        run: |
          # Prefer reproducible installs; if the lock is stale (e.g., version bump), refresh it in CI
          uv sync --locked || (uv lock && uv sync --locked)

      - name: Ruff lint
        run: uv run --no-sync ruff check .

      - name: Ruff format check
        run: uv run --no-sync ruff format --check .

      - name: Build extension (maturin develop)
        run: uv run --no-sync maturin develop -r

      - name: Run pytest
        run: uv run --no-sync pytest -q
